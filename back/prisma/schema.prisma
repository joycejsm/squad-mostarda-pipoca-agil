// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id           Int      @id @default(autoincrement())
  username     String
  email        String?  @unique  // Opcional inicialmente
  password     String?             // Opcional inicialmente
  reminderTime String?  @map("reminder_time")
  isComplete   Boolean  @default(false) @map("is_complete") // Flag para cadastro completo
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  
  // Relacionamentos
  goals         Goal[]
  expenses      Expense[]
  notifications Notification[]
  
  @@map("users")
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  expenses Expense[]
  
  @@map("categories")
}

model Feeling {
  id       Int       @id @default(autoincrement())
  label    String    @unique
  expenses Expense[]
  
  @@map("feelings")
}

model Goal {
  id            Int       @id @default(autoincrement())
  userId        Int       @map("user_id")
  title         String
  targetAmount  Decimal   @map("target_amount") @db.Decimal(10, 2)
  currentAmount Decimal   @default(0.00) @map("current_amount") @db.Decimal(10, 2)
  startDate     DateTime  @map("start_date") @db.Date
  endDate       DateTime  @map("end_date") @db.Date
  isActive      Boolean   @default(true) @map("is_active") // Para poder "arquivar" metas
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")
  
  // Relacionamentos
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  expenses Expense[]
  
  @@map("goals")
}

model Expense {
  id          Int      @id @default(autoincrement())
  userId      Int      @map("user_id")
  goalId      Int?     @map("goal_id") // Opcional - nem todo gasto está linked a uma meta
  amount      Decimal  @db.Decimal(10, 2)
  description String
  categoryId  Int      @map("category_id")
  feelingId   Int      @map("feeling_id")
  date        DateTime @default(now()) // Data do gasto (pode ser editada)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  
  // Relacionamentos
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  goal     Goal?    @relation(fields: [goalId], references: [id], onDelete: SetNull)
  category Category @relation(fields: [categoryId], references: [id])
  feeling  Feeling  @relation(fields: [feelingId], references: [id])
  
  // Constraint para amount >= 0
  @@map("expenses")
}

model Reflection {
  id        Int      @id @default(autoincrement())
  message   String
  isActive  Boolean  @default(true) @map("is_active") // Para poder desativar reflexões
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  @@map("reflections")
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  type      String   @default("general") // "reminder", "motivation", "goal_progress", "general"
  title     String   @default("Notificação")
  message   String
  seen      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  
  // Relacionamentos
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
}
